diff --git a/.gitignore b/.gitignore
index c562fa3..9d97075 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,7 @@
+# Created by https://www.toptal.com/developers/gitignore/api/visualstudiocode,java,maven,macos
+# Edit at https://www.toptal.com/developers/gitignore?templates=visualstudiocode,java,maven,macos
+
+# Original stuff.
 *.iml
 *.ipr
 *.iws
@@ -9,3 +13,102 @@ test-output/
 .idea
 .*.swp
 .*.swo
+
+### Java ###
+# Compiled class file
+*.class
+
+# Log file
+*.log
+
+# BlueJ files
+*.ctxt
+
+# Mobile Tools for Java (J2ME)
+.mtj.tmp/
+
+# Package Files #
+*.jar
+*.war
+*.nar
+*.ear
+*.zip
+*.tar.gz
+*.rar
+
+# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
+hs_err_pid*
+replay_pid*
+
+### macOS ###
+# General
+.DS_Store
+.AppleDouble
+.LSOverride
+
+# Icon must end with two \r
+Icon
+
+
+# Thumbnails
+._*
+
+# Files that might appear in the root of a volume
+.DocumentRevisions-V100
+.fseventsd
+.Spotlight-V100
+.TemporaryItems
+.Trashes
+.VolumeIcon.icns
+.com.apple.timemachine.donotpresent
+
+# Directories potentially created on remote AFP share
+.AppleDB
+.AppleDesktop
+Network Trash Folder
+Temporary Items
+.apdisk
+
+### macOS Patch ###
+# iCloud generated files
+*.icloud
+
+### Maven ###
+target/
+pom.xml.tag
+pom.xml.releaseBackup
+pom.xml.versionsBackup
+pom.xml.next
+release.properties
+dependency-reduced-pom.xml
+buildNumber.properties
+.mvn/timing.properties
+# https://github.com/takari/maven-wrapper#usage-without-binary-jar
+.mvn/wrapper/maven-wrapper.jar
+
+# Eclipse m2e generated files
+# Eclipse Core
+.project
+# JDT-specific (Eclipse Java Development Tools)
+.classpath
+
+### VisualStudioCode ###
+.vscode/*
+!.vscode/settings.json
+!.vscode/tasks.json
+!.vscode/launch.json
+!.vscode/extensions.json
+!.vscode/*.code-snippets
+
+# Local History for Visual Studio Code
+.history/
+
+# Built Visual Studio Code Extensions
+*.vsix
+
+### VisualStudioCode Patch ###
+# Ignore all local history of files
+.history
+.ionide
+
+# End of https://www.toptal.com/developers/gitignore/api/visualstudiocode,java,maven,macos
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..85bb5f4
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+  "java.compile.nullAnalysis.mode": "automatic",
+  "java.configuration.updateBuildConfiguration": "automatic",
+  "java.debug.settings.onBuildFailureProceed": true
+}
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..4d459a6
--- /dev/null
+++ b/README.md
@@ -0,0 +1,33 @@
+# Apache Trino TPCHGen Package (Forked)
+
+This is a personal fork of the original Apache Trino TPCHGen tool. The original
+reason I forked it was to have a source of truth of TPCH datasets beyond DuckDB's
+and is used to provide the seeds for the test suite of my Rust implementation
+in [tpchgen-rs](https://github.com/clflushopt/tpchgen-rs).
+
+# Usage
+
+I have tested this on macOS (Darwin 24.1.0) i.e. Sequoia 15.1 on a Macbook M3 and
+on Fedora 41 on an AMD workstation.
+
+I didn't fix the several issues I encountered such as all tests fail when run on
+macOS but overall you I made it work just enough to get what I want (sorry).
+
+```sh
+
+mvn clean
+mvn package
+mvn -B test
+```
+
+# License
+
+The project is under an Apache 2.0 license see [LICENSE] and thus inherits its parent
+license.
+
+# Changes
+
+- Add `Runner.java` to allow a CLI like interface for code generation.
+- Plugin a CSV writer to write the data out.
+- Disable `checkstyle` since it conflicts with my default LSP formatter.
+- Add tests that write to Stdout to make sure things work and are not broken.
diff --git a/patches/csv.patch b/patches/csv.patch
new file mode 100644
index 0000000..2b540b6
--- /dev/null
+++ b/patches/csv.patch
@@ -0,0 +1,538 @@
+diff --git a/src/main/java/io/trino/tpch/Customer.java b/src/main/java/io/trino/tpch/Customer.java
+index b71ab9e..f62e25c 100644
+--- a/src/main/java/io/trino/tpch/Customer.java
++++ b/src/main/java/io/trino/tpch/Customer.java
+@@ -27,10 +27,8 @@ public record Customer(
+         long accountBalanceInCents,
+         String marketSegment,
+         String comment)
+-        implements TpchEntity
+-{
+-    public Customer
+-    {
++        implements TpchEntity {
++    public Customer {
+         requireNonNull(name, "name is null");
+         requireNonNull(address, "address is null");
+         requireNonNull(phone, "phone is null");
+@@ -38,14 +36,26 @@ public record Customer(
+         requireNonNull(comment, "comment is null");
+     }
+ 
+-    public double accountBalance()
+-    {
++    public double accountBalance() {
+         return accountBalanceInCents / 100.0;
+     }
+ 
+     @Override
+-    public String toLine()
+-    {
+-        return buildLine(customerKey, name, address, nationKey, phone, formatMoney(accountBalanceInCents), marketSegment, comment);
++    public String toCsv() {
++        return String.join(",",
++                String.valueOf(customerKey),
++                name,
++                address,
++                String.valueOf(nationKey),
++                phone,
++                formatMoney(accountBalanceInCents),
++                marketSegment,
++                comment);
++    }
++
++    @Override
++    public String toLine() {
++        return buildLine(customerKey, name, address, nationKey, phone, formatMoney(accountBalanceInCents),
++                marketSegment, comment);
+     }
+ }
+diff --git a/src/main/java/io/trino/tpch/LineItem.java b/src/main/java/io/trino/tpch/LineItem.java
+index f3a23bb..e4b65a3 100644
+--- a/src/main/java/io/trino/tpch/LineItem.java
++++ b/src/main/java/io/trino/tpch/LineItem.java
+@@ -36,10 +36,8 @@ public record LineItem(
+         String shipInstructions,
+         String shipMode,
+         String comment)
+-        implements TpchEntity
+-{
+-    public LineItem
+-    {
++        implements TpchEntity {
++    public LineItem {
+         requireNonNull(returnFlag, "returnFlag is null");
+         requireNonNull(status, "status is null");
+         requireNonNull(shipInstructions, "shipInstructions is null");
+@@ -47,24 +45,41 @@ public record LineItem(
+         requireNonNull(comment, "comment is null");
+     }
+ 
+-    public double extendedPrice()
+-    {
++    public double extendedPrice() {
+         return extendedPriceInCents / 100.0;
+     }
+ 
+-    public double discount()
+-    {
++    public double discount() {
+         return discountPercent / 100.0;
+     }
+ 
+-    public double tax()
+-    {
++    public double tax() {
+         return taxPercent / 100.0;
+     }
+ 
+     @Override
+-    public String toLine()
+-    {
++    public String toCsv() {
++        return String.join(",",
++                String.valueOf(orderKey),
++                String.valueOf(partKey),
++                String.valueOf(supplierKey),
++                String.valueOf(lineNumber),
++                String.valueOf(quantity),
++                formatMoney(extendedPriceInCents),
++                formatMoney(discountPercent),
++                formatMoney(taxPercent),
++                returnFlag,
++                status,
++                formatDate(shipDate),
++                formatDate(commitDate),
++                formatDate(receiptDate),
++                shipInstructions,
++                shipMode,
++                comment);
++    }
++
++    @Override
++    public String toLine() {
+         return buildLine(
+                 orderKey,
+                 partKey,
+diff --git a/src/main/java/io/trino/tpch/Nation.java b/src/main/java/io/trino/tpch/Nation.java
+index ba044a6..126d352 100644
+--- a/src/main/java/io/trino/tpch/Nation.java
++++ b/src/main/java/io/trino/tpch/Nation.java
+@@ -22,17 +22,19 @@ public record Nation(
+         String name,
+         long regionKey,
+         String comment)
+-        implements TpchEntity
+-{
+-    public Nation
+-    {
++        implements TpchEntity {
++    public Nation {
+         requireNonNull(name, "name is null");
+         requireNonNull(comment, "comment is null");
+     }
+ 
+     @Override
+-    public String toLine()
+-    {
++    public String toCsv() {
++        return String.join(",", String.valueOf(nationKey), name, String.valueOf(regionKey), comment);
++    }
++
++    @Override
++    public String toLine() {
+         return buildLine(nationKey, name, regionKey, comment);
+     }
+ }
+diff --git a/src/main/java/io/trino/tpch/Order.java b/src/main/java/io/trino/tpch/Order.java
+index ec6a626..749e0d4 100644
+--- a/src/main/java/io/trino/tpch/Order.java
++++ b/src/main/java/io/trino/tpch/Order.java
+@@ -29,23 +29,33 @@ public record Order(
+         String clerk,
+         int shipPriority,
+         String comment)
+-        implements TpchEntity
+-{
+-    public Order
+-    {
++        implements TpchEntity {
++    public Order {
+         requireNonNull(orderPriority, "orderPriority is null");
+         requireNonNull(clerk, "clerk is null");
+         requireNonNull(comment, "comment is null");
+     }
+ 
+-    public double totalPrice()
+-    {
++    public double totalPrice() {
+         return totalPriceInCents / 100.0;
+     }
+ 
+     @Override
+-    public String toLine()
+-    {
++    public String toCsv() {
++        return String.join(",",
++                String.valueOf(orderKey),
++                String.valueOf(customerKey),
++                String.valueOf(orderStatus),
++                formatMoney(totalPriceInCents),
++                String.valueOf(orderDate),
++                orderPriority,
++                clerk,
++                String.valueOf(shipPriority),
++                comment);
++    }
++
++    @Override
++    public String toLine() {
+         return buildLine(
+                 orderKey,
+                 customerKey,
+diff --git a/src/main/java/io/trino/tpch/Part.java b/src/main/java/io/trino/tpch/Part.java
+index 46382af..302a229 100644
+--- a/src/main/java/io/trino/tpch/Part.java
++++ b/src/main/java/io/trino/tpch/Part.java
+@@ -28,10 +28,8 @@ public record Part(
+         String container,
+         long retailPriceInCents,
+         String comment)
+-        implements TpchEntity
+-{
+-    public Part
+-    {
++        implements TpchEntity {
++    public Part {
+         requireNonNull(name, "name is null");
+         requireNonNull(manufacturer, "manufacturer is null");
+         requireNonNull(brand, "brand is null");
+@@ -40,14 +38,26 @@ public record Part(
+         requireNonNull(comment, "comment is null");
+     }
+ 
+-    public double retailPrice()
+-    {
++    public double retailPrice() {
+         return retailPriceInCents / 100.0;
+     }
+ 
+     @Override
+-    public String toLine()
+-    {
++    public String toCsv() {
++        return String.join(",",
++                String.valueOf(partKey),
++                name,
++                manufacturer,
++                brand,
++                type,
++                String.valueOf(size),
++                container,
++                formatMoney(retailPriceInCents),
++                comment);
++    }
++
++    @Override
++    public String toLine() {
+         return buildLine(partKey,
+                 name,
+                 manufacturer,
+diff --git a/src/main/java/io/trino/tpch/PartSupplier.java b/src/main/java/io/trino/tpch/PartSupplier.java
+index b7f2378..01065ca 100644
+--- a/src/main/java/io/trino/tpch/PartSupplier.java
++++ b/src/main/java/io/trino/tpch/PartSupplier.java
+@@ -24,21 +24,27 @@ public record PartSupplier(
+         int availableQuantity,
+         long supplyCostInCents,
+         String comment)
+-        implements TpchEntity
+-{
+-    public PartSupplier
+-    {
++        implements TpchEntity {
++    public PartSupplier {
+         requireNonNull(comment, "comment is null");
+     }
+ 
+-    public double getSupplyCost()
+-    {
++    public double getSupplyCost() {
+         return supplyCostInCents / 100.0;
+     }
+ 
+     @Override
+-    public String toLine()
+-    {
++    public String toCsv() {
++        return String.join(",",
++                String.valueOf(partKey),
++                String.valueOf(supplierKey),
++                String.valueOf(availableQuantity),
++                formatMoney(supplyCostInCents),
++                comment);
++    }
++
++    @Override
++    public String toLine() {
+         return buildLine(partKey, supplierKey, availableQuantity, formatMoney(supplyCostInCents), comment);
+     }
+ }
+diff --git a/src/main/java/io/trino/tpch/Region.java b/src/main/java/io/trino/tpch/Region.java
+index 176772b..d67d80b 100644
+--- a/src/main/java/io/trino/tpch/Region.java
++++ b/src/main/java/io/trino/tpch/Region.java
+@@ -21,17 +21,19 @@ public record Region(
+         long regionKey,
+         String name,
+         String comment)
+-        implements TpchEntity
+-{
+-    public Region
+-    {
++        implements TpchEntity {
++    public Region {
+         requireNonNull(name, "name is null");
+         requireNonNull(comment, "comment is null");
+     }
+ 
+     @Override
+-    public String toLine()
+-    {
++    public String toCsv() {
++        return String.join(",", String.valueOf(regionKey), name, comment);
++    }
++
++    @Override
++    public String toLine() {
+         return buildLine(regionKey, name, comment);
+     }
+ }
+diff --git a/src/main/java/io/trino/tpch/Runner.java b/src/main/java/io/trino/tpch/Runner.java
+index ace6440..d03f531 100644
+--- a/src/main/java/io/trino/tpch/Runner.java
++++ b/src/main/java/io/trino/tpch/Runner.java
+@@ -35,22 +35,14 @@ public class Runner {
+         // l -- code (same as n and r),
+         // O -- orders, L -- lineitem, P -- part,
+         // S -- partsupp
++        Double scale = 0.001;
++        String outputDirectory = "fixtures/sf-0.001";
+ 
+-        if (args.length < 2) {
+-            System.out.println("Usage: <scale> <output directory>");
+-            System.exit(1);
+-        }
+-
+-        double scale = Double.parseDouble(args[0]);
+-
+-        // Check that the scale is within TPC-H limits.
+-        if (scale < 0.01 || scale > 1000) {
++        if (scale < 0.001 || scale > 1000) {
+             System.out.println("Scale must be between 0.01 and 1000");
+             System.exit(1);
+         }
+ 
+-        String outputDirectory = args[1];
+-
+         // Check if the output directory exists.
+         File directory = new File(outputDirectory);
+ 
+diff --git a/src/main/java/io/trino/tpch/Supplier.java b/src/main/java/io/trino/tpch/Supplier.java
+index f8135f8..deb2a03 100644
+--- a/src/main/java/io/trino/tpch/Supplier.java
++++ b/src/main/java/io/trino/tpch/Supplier.java
+@@ -26,24 +26,32 @@ public record Supplier(
+         String phone,
+         long accountBalanceInCents,
+         String comment)
+-        implements TpchEntity
+-{
+-    public Supplier
+-    {
++        implements TpchEntity {
++    public Supplier {
+         requireNonNull(name, "name is null");
+         requireNonNull(address, "address is null");
+         requireNonNull(phone, "phone is null");
+         requireNonNull(comment, "comment is null");
+     }
+ 
+-    public double getAccountBalance()
+-    {
++    public double getAccountBalance() {
+         return accountBalanceInCents / 100.0;
+     }
+ 
+     @Override
+-    public String toLine()
+-    {
++    public String toCsv() {
++        return String.join(",",
++                String.valueOf(supplierKey),
++                name,
++                address,
++                String.valueOf(nationKey),
++                phone,
++                formatMoney(accountBalanceInCents),
++                comment);
++    }
++
++    @Override
++    public String toLine() {
+         return buildLine(
+                 supplierKey,
+                 name,
+diff --git a/src/main/java/io/trino/tpch/TpchEntity.java b/src/main/java/io/trino/tpch/TpchEntity.java
+index 9cd7aa4..cecc2f9 100644
+--- a/src/main/java/io/trino/tpch/TpchEntity.java
++++ b/src/main/java/io/trino/tpch/TpchEntity.java
+@@ -14,9 +14,10 @@
+ package io.trino.tpch;
+ 
+ public sealed interface TpchEntity
+-        permits Customer, LineItem, Nation, Order, Part, PartSupplier, Region, Supplier
+-{
++        permits Customer, LineItem, Nation, Order, Part, PartSupplier, Region, Supplier {
+     long rowNumber();
+ 
+     String toLine();
++
++    String toCsv();
+ }
+diff --git a/src/main/java/io/trino/tpch/TpchTable.java b/src/main/java/io/trino/tpch/TpchTable.java
+index 1eed611..5081338 100644
+--- a/src/main/java/io/trino/tpch/TpchTable.java
++++ b/src/main/java/io/trino/tpch/TpchTable.java
+@@ -155,35 +155,32 @@ public abstract class TpchTable<E extends TpchEntity> {
+             FileWriter writer;
+             try {
+                 writer = new FileWriter(fileName, StandardCharsets.UTF_8);
++                // Write the header.
++                String[] header = columns.stream().map((TpchColumn<?> column) -> column.getColumnName())
++                        .toArray(String[]::new);
++
++                writer.write(String.join(",", header) + "\n");
++
+                 for (var entity : generator) {
+                     // Write the entity to the CSV file, entity is a row of objects and each
+                     // object is indexed into its columns by the table's columns to properly
+                     // cast the object to the correct type.
+ 
+                     // Cast and build the row of objects.
+-                    var line = entity.toLine();
++                    var line = entity.toCsv();
+ 
+                     // Write the line to the CSV file.
+                     // Write the CSV file.
+                     try {
+-
+-                        // Write the header.
+-                        String[] header = columns.stream().map((TpchColumn<?> column) -> column.getColumnName())
+-                                .toArray(String[]::new);
+-
+-                        writer.write(String.join(",", header));
+-
+                         // Write the line.
+-                        writer.write(line);
+-
+-                        // Close the writer.
+-                        writer.close();
++                        writer.write(line + "\n");
+                     } catch (IOException e) {
+                         System.out.println("Error writing CSV file: " + e.getMessage());
+                         System.exit(1);
+                     }
+ 
+                 }
++                writer.close();
+             } catch (IOException e) {
+                 // TODO Auto-generated catch block
+                 e.printStackTrace();
+diff --git a/src/test/java/io/trino/tpch/TestTpchColumn.java b/src/test/java/io/trino/tpch/TestTpchColumn.java
+index 88f2e44..26d0f6d 100644
+--- a/src/test/java/io/trino/tpch/TestTpchColumn.java
++++ b/src/test/java/io/trino/tpch/TestTpchColumn.java
+@@ -13,23 +13,21 @@
+  */
+ package io.trino.tpch;
+ 
+-import org.testng.annotations.Test;
+-
+-import java.util.List;
+-import java.util.function.Consumer;
+-import java.util.stream.Stream;
+-
+ import static java.lang.String.format;
+ import static java.util.Arrays.asList;
+ import static org.testng.Assert.assertEquals;
+ import static org.testng.Assert.assertFalse;
+ import static org.testng.Assert.assertTrue;
+ 
+-public class TestTpchColumn
+-{
++import java.util.List;
++import java.util.function.Consumer;
++import java.util.stream.Stream;
++
++import org.testng.annotations.Test;
++
++public class TestTpchColumn {
+     @Test
+-    public void testAllColumnNamesHaveValidPrefixes()
+-    {
++    public void testAllColumnNamesHaveValidPrefixes() {
+         forEachTpchColumn(column -> {
+             String columnName = column.getColumnName();
+             assertTrue(hasValidColumnPrefix(columnName),
+@@ -38,33 +36,29 @@ public class TestTpchColumn
+     }
+ 
+     @Test
+-    public void testForbidsInvalidTpchPrefixes()
+-    {
++    public void testForbidsInvalidTpchPrefixes() {
+         assertFalse(hasValidColumnPrefix("order"));
+         assertFalse(hasValidColumnPrefix("z_order"));
+     }
+ 
+-    private boolean hasValidColumnPrefix(String columnName)
+-    {
++    private boolean hasValidColumnPrefix(String columnName) {
+         String columnNameLowercase = columnName.toLowerCase();
+         return Stream.of("p_", "ps_", "l_", "o_", "s_", "c_", "n_", "r_")
+                 .anyMatch(columnNameLowercase::startsWith);
+     }
+ 
+     @Test
+-    public void testSimplifiedColumnNamesAreSuffixesOfColumnNames()
+-    {
+-        forEachTpchColumn(column -> assertEquals(column.getSimplifiedColumnName(), stripPrefix(column.getColumnName())));
++    public void testSimplifiedColumnNamesAreSuffixesOfColumnNames() {
++        forEachTpchColumn(
++                column -> assertEquals(column.getSimplifiedColumnName(), stripPrefix(column.getColumnName())));
+     }
+ 
+-    private String stripPrefix(String columnName)
+-    {
++    private String stripPrefix(String columnName) {
+         return columnName.replaceFirst("\\w{1,2}_", "");
+     }
+ 
+-    private void forEachTpchColumn(Consumer<TpchColumn> columnConsumer)
+-    {
+-        List<Class<? extends TpchColumn>> columnEnums = asList(
++    private void forEachTpchColumn(Consumer<TpchColumn<?>> columnConsumer) {
++        List<Class<? extends TpchColumn<?>>> columnEnums = asList(
+                 CustomerColumn.class,
+                 LineItemColumn.class,
+                 NationColumn.class,
+@@ -74,7 +68,7 @@ public class TestTpchColumn
+                 RegionColumn.class,
+                 SupplierColumn.class);
+ 
+-        columnEnums.forEach((Class<? extends TpchColumn> columnEnumClass) -> {
++        columnEnums.forEach((Class<? extends TpchColumn<?>> columnEnumClass) -> {
+             asList(columnEnumClass.getEnumConstants()).forEach(columnConsumer::accept);
+         });
+     }
diff --git a/patches/runner.patch b/patches/runner.patch
new file mode 100644
index 0000000..b82f712
--- /dev/null
+++ b/patches/runner.patch
@@ -0,0 +1,514 @@
+diff --git a/.vscode/settings.json b/.vscode/settings.json
+new file mode 100644
+index 0000000..85bb5f4
+--- /dev/null
++++ b/.vscode/settings.json
+@@ -0,0 +1,5 @@
++{
++  "java.compile.nullAnalysis.mode": "automatic",
++  "java.configuration.updateBuildConfiguration": "automatic",
++  "java.debug.settings.onBuildFailureProceed": true
++}
+diff --git a/pom.xml b/pom.xml
+index 5b42e9a..7c269be 100644
+--- a/pom.xml
++++ b/pom.xml
+@@ -39,6 +39,8 @@
+         <air.test.jvmsize>2g</air.test.jvmsize>
+         <air.check.skip-spotbugs>true</air.check.skip-spotbugs>
+         <air.check.skip-pmd>true</air.check.skip-pmd>
++        <air.check.skip-checkstyle>true</air.check.skip-checkstyle>
++        <checkstyle.skip>true</checkstyle.skip>
+     </properties>
+ 
+     <dependencies>
+@@ -64,6 +66,13 @@
+     <build>
+         <pluginManagement>
+             <plugins>
++                <plugin>
++                    <groupId>org.apache.maven.plugins</groupId>
++                    <artifactId>maven-checkstyle-plugin</artifactId>
++                    <configuration>
++                        <skip>true</skip>
++                    </configuration>
++                </plugin>
+                 <plugin>
+                     <groupId>com.github.spotbugs</groupId>
+                     <artifactId>spotbugs-maven-plugin</artifactId>
+diff --git a/src/main/java/io/trino/tpch/Runner.java b/src/main/java/io/trino/tpch/Runner.java
+new file mode 100644
+index 0000000..ace6440
+--- /dev/null
++++ b/src/main/java/io/trino/tpch/Runner.java
+@@ -0,0 +1,72 @@
++/*
++ * Licensed under the Apache License, Version 2.0 (the "License");
++ * you may not use this file except in compliance with the License.
++ * You may obtain a copy of the License at
++ *
++ *     http://www.apache.org/licenses/LICENSE-2.0
++ *
++ * Unless required by applicable law or agreed to in writing, software
++ * distributed under the License is distributed on an "AS IS" BASIS,
++ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++ * See the License for the specific language governing permissions and
++ * limitations under the License.
++ */
++package io.trino.tpch;
++
++import java.io.File;
++
++public class Runner {
++    public static void main(String[] args) {
++        // Implements a dbgen command line utility interface to allow
++        // users to generate TPC-H data.
++        //
++        // The interface supported is :
++        // -s <scale> 1 Scale of the database population. Scale
++        // 1.0 represents ~1 GB of data
++        // -o <output directory> Directory to place the output data
++        //
++        // This isn't handled since we probably want all the data to build
++        // the CSV files used for tests.
++        //
++        // -T <table> Generate the data for a particular table
++        // ONLY. Arguments: p -- part/partuspp,
++        // c -- customer, s -- supplier,
++        // o -- orders/lineitem, n -- nation, r -- region,
++        // l -- code (same as n and r),
++        // O -- orders, L -- lineitem, P -- part,
++        // S -- partsupp
++
++        if (args.length < 2) {
++            System.out.println("Usage: <scale> <output directory>");
++            System.exit(1);
++        }
++
++        double scale = Double.parseDouble(args[0]);
++
++        // Check that the scale is within TPC-H limits.
++        if (scale < 0.01 || scale > 1000) {
++            System.out.println("Scale must be between 0.01 and 1000");
++            System.exit(1);
++        }
++
++        String outputDirectory = args[1];
++
++        // Check if the output directory exists.
++        File directory = new File(outputDirectory);
++
++        // Check if the output directory is a directory.
++        if (!directory.isDirectory()) {
++            System.out.println("Output directory does not exist or is not a directory");
++            System.exit(1);
++        }
++
++        // Check if the output directory exists.
++        if (directory.isDirectory() && !directory.exists()) {
++            System.out.println("Output directory does not exist");
++            System.exit(1);
++        }
++
++        TpchTable.toCsvFile(outputDirectory, scale);
++    }
++
++}
+diff --git a/src/main/java/io/trino/tpch/TpchTable.java b/src/main/java/io/trino/tpch/TpchTable.java
+index 35ccb7a..1eed611 100644
+--- a/src/main/java/io/trino/tpch/TpchTable.java
++++ b/src/main/java/io/trino/tpch/TpchTable.java
+@@ -13,76 +13,65 @@
+  */
+ package io.trino.tpch;
+ 
+-import com.google.common.collect.ImmutableList;
+-import com.google.common.collect.ImmutableMap;
+-import com.google.common.collect.Maps;
++import static com.google.common.base.Preconditions.checkArgument;
+ 
++import java.io.FileWriter;
++import java.io.IOException;
++import java.nio.charset.StandardCharsets;
+ import java.util.List;
+ import java.util.Map;
+ 
+-import static com.google.common.base.Preconditions.checkArgument;
++import com.google.common.collect.ImmutableList;
++import com.google.common.collect.ImmutableMap;
++import com.google.common.collect.Maps;
+ 
+-public abstract class TpchTable<E extends TpchEntity>
+-{
+-    public static final TpchTable<Customer> CUSTOMER = new TpchTable<Customer>("customer", CustomerColumn.values())
+-    {
++public abstract class TpchTable<E extends TpchEntity> {
++    public static final TpchTable<Customer> CUSTOMER = new TpchTable<Customer>("customer", CustomerColumn.values()) {
+         @Override
+-        public Iterable<Customer> createGenerator(double scaleFactor, int part, int partCount)
+-        {
++        public Iterable<Customer> createGenerator(double scaleFactor, int part, int partCount) {
+             return new CustomerGenerator(scaleFactor, part, partCount);
+         }
+     };
+ 
+-    public static final TpchTable<Order> ORDERS = new TpchTable<Order>("orders", OrderColumn.values())
+-    {
++    public static final TpchTable<Order> ORDERS = new TpchTable<Order>("orders", OrderColumn.values()) {
+         @Override
+-        public Iterable<Order> createGenerator(double scaleFactor, int part, int partCount)
+-        {
++        public Iterable<Order> createGenerator(double scaleFactor, int part, int partCount) {
+             return new OrderGenerator(scaleFactor, part, partCount);
+         }
+     };
+ 
+-    public static final TpchTable<LineItem> LINE_ITEM = new TpchTable<LineItem>("lineitem", LineItemColumn.values())
+-    {
++    public static final TpchTable<LineItem> LINE_ITEM = new TpchTable<LineItem>("lineitem", LineItemColumn.values()) {
+         @Override
+-        public Iterable<LineItem> createGenerator(double scaleFactor, int part, int partCount)
+-        {
++        public Iterable<LineItem> createGenerator(double scaleFactor, int part, int partCount) {
+             return new LineItemGenerator(scaleFactor, part, partCount);
+         }
+     };
+ 
+-    public static final TpchTable<Part> PART = new TpchTable<Part>("part", PartColumn.values())
+-    {
++    public static final TpchTable<Part> PART = new TpchTable<Part>("part", PartColumn.values()) {
+         @Override
+-        public Iterable<Part> createGenerator(double scaleFactor, int part, int partCount)
+-        {
++        public Iterable<Part> createGenerator(double scaleFactor, int part, int partCount) {
+             return new PartGenerator(scaleFactor, part, partCount);
+         }
+     };
+ 
+-    public static final TpchTable<PartSupplier> PART_SUPPLIER = new TpchTable<PartSupplier>("partsupp", PartSupplierColumn.values())
+-    {
++    public static final TpchTable<PartSupplier> PART_SUPPLIER = new TpchTable<PartSupplier>("partsupp",
++            PartSupplierColumn.values()) {
+         @Override
+-        public Iterable<PartSupplier> createGenerator(double scaleFactor, int part, int partCount)
+-        {
++        public Iterable<PartSupplier> createGenerator(double scaleFactor, int part, int partCount) {
+             return new PartSupplierGenerator(scaleFactor, part, partCount);
+         }
+     };
+ 
+-    public static final TpchTable<Supplier> SUPPLIER = new TpchTable<Supplier>("supplier", SupplierColumn.values())
+-    {
++    public static final TpchTable<Supplier> SUPPLIER = new TpchTable<Supplier>("supplier", SupplierColumn.values()) {
+         @Override
+-        public Iterable<Supplier> createGenerator(double scaleFactor, int part, int partCount)
+-        {
++        public Iterable<Supplier> createGenerator(double scaleFactor, int part, int partCount) {
+             return new SupplierGenerator(scaleFactor, part, partCount);
+         }
+     };
+ 
+-    public static final TpchTable<Nation> NATION = new TpchTable<Nation>("nation", NationColumn.values())
+-    {
++    public static final TpchTable<Nation> NATION = new TpchTable<Nation>("nation", NationColumn.values()) {
+         @Override
+-        public Iterable<Nation> createGenerator(double scaleFactor, int part, int partCount)
+-        {
++        public Iterable<Nation> createGenerator(double scaleFactor, int part, int partCount) {
+             if (part != 1) {
+                 return ImmutableList.of();
+             }
+@@ -90,11 +79,9 @@ public abstract class TpchTable<E extends TpchEntity>
+         }
+     };
+ 
+-    public static final TpchTable<Region> REGION = new TpchTable<Region>("region", RegionColumn.values())
+-    {
++    public static final TpchTable<Region> REGION = new TpchTable<Region>("region", RegionColumn.values()) {
+         @Override
+-        public Iterable<Region> createGenerator(double scaleFactor, int part, int partCount)
+-        {
++        public Iterable<Region> createGenerator(double scaleFactor, int part, int partCount) {
+             if (part != 1) {
+                 return ImmutableList.of();
+             }
+@@ -110,13 +97,11 @@ public abstract class TpchTable<E extends TpchEntity>
+         TABLES_BY_NAME = Maps.uniqueIndex(TABLES, TpchTable::getTableName);
+     }
+ 
+-    public static List<TpchTable<?>> getTables()
+-    {
++    public static List<TpchTable<?>> getTables() {
+         return TABLES;
+     }
+ 
+-    public static TpchTable<?> getTable(String tableName)
+-    {
++    public static TpchTable<?> getTable(String tableName) {
+         TpchTable<?> table = TABLES_BY_NAME.get(tableName);
+         checkArgument(table != null, "Table %s not found", tableName);
+         return table;
+@@ -126,8 +111,7 @@ public abstract class TpchTable<E extends TpchEntity>
+     private final List<TpchColumn<E>> columns;
+     private final Map<String, TpchColumn<E>> columnsByName;
+ 
+-    private TpchTable(String tableName, TpchColumn<E>[] columns)
+-    {
++    private TpchTable(String tableName, TpchColumn<E>[] columns) {
+         this.tableName = tableName;
+         this.columns = ImmutableList.copyOf(columns);
+         this.columnsByName = new ImmutableMap.Builder<String, TpchColumn<E>>()
+@@ -136,22 +120,75 @@ public abstract class TpchTable<E extends TpchEntity>
+                 .build();
+     }
+ 
+-    public String getTableName()
+-    {
++    public String getTableName() {
+         return tableName;
+     }
+ 
+-    public List<TpchColumn<E>> getColumns()
+-    {
++    public List<TpchColumn<E>> getColumns() {
+         return columns;
+     }
+ 
+-    public TpchColumn<E> getColumn(String columnName)
+-    {
++    public TpchColumn<E> getColumn(String columnName) {
+         TpchColumn<E> column = columnsByName.get(columnName);
+         checkArgument(column != null, "Table %s does not have a column %s", tableName, columnName);
+         return column;
+     }
+ 
+     public abstract Iterable<E> createGenerator(double scaleFactor, int part, int partCount);
++
++    @Override
++    public String toString() {
++        return tableName;
++    }
++
++    public static void toCsvFile(String outputDirectory, Double scale) {
++        // Create a table of generators (iterables) for each table.
++        List<TpchTable<?>> tables = TpchTable.getTables();
++
++        // Iterate and write a CSV file for each table in the target directory.
++        for (TpchTable<?> table : tables) {
++            String tableName = table.getTableName();
++            List<? extends TpchColumn<?>> columns = table.getColumns();
++            String fileName = outputDirectory + "/" + tableName + ".csv";
++
++            var generator = table.createGenerator(scale, 1, 1);
++            FileWriter writer;
++            try {
++                writer = new FileWriter(fileName, StandardCharsets.UTF_8);
++                for (var entity : generator) {
++                    // Write the entity to the CSV file, entity is a row of objects and each
++                    // object is indexed into its columns by the table's columns to properly
++                    // cast the object to the correct type.
++
++                    // Cast and build the row of objects.
++                    var line = entity.toLine();
++
++                    // Write the line to the CSV file.
++                    // Write the CSV file.
++                    try {
++
++                        // Write the header.
++                        String[] header = columns.stream().map((TpchColumn<?> column) -> column.getColumnName())
++                                .toArray(String[]::new);
++
++                        writer.write(String.join(",", header));
++
++                        // Write the line.
++                        writer.write(line);
++
++                        // Close the writer.
++                        writer.close();
++                    } catch (IOException e) {
++                        System.out.println("Error writing CSV file: " + e.getMessage());
++                        System.exit(1);
++                    }
++
++                }
++            } catch (IOException e) {
++                // TODO Auto-generated catch block
++                e.printStackTrace();
++            }
++        }
++    }
++
+ }
+diff --git a/src/main/java/io/trino/tpch/TpchTables.java b/src/main/java/io/trino/tpch/TpchTables.java
+new file mode 100644
+index 0000000..8017fcd
+--- /dev/null
++++ b/src/main/java/io/trino/tpch/TpchTables.java
+@@ -0,0 +1,36 @@
++/*
++ * Licensed under the Apache License, Version 2.0 (the "License");
++ * you may not use this file except in compliance with the License.
++ * You may obtain a copy of the License at
++ *
++ *     http://www.apache.org/licenses/LICENSE-2.0
++ *
++ * Unless required by applicable law or agreed to in writing, software
++ * distributed under the License is distributed on an "AS IS" BASIS,
++ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++ * See the License for the specific language governing permissions and
++ * limitations under the License.
++ */
++package io.trino.tpch;
++
++// Enumerates the tables that can be generated by the dbgen utility.
++//
++// The tables are:
++// - Part
++// - PartSupp
++// - Supplier
++// - Customer
++// - Orders
++// - LineItem
++// - Nation
++// - Region
++public enum TpchTables {
++    PART,
++    PARTSUPP,
++    SUPPLIER,
++    CUSTOMER,
++    ORDERS,
++    LINEITEM,
++    NATION,
++    REGION
++}
+diff --git a/src/test/java/io/trino/tpch/TestNationGenerator.java b/src/test/java/io/trino/tpch/TestNationGenerator.java
+index c3212f7..4e0f432 100644
+--- a/src/test/java/io/trino/tpch/TestNationGenerator.java
++++ b/src/test/java/io/trino/tpch/TestNationGenerator.java
+@@ -13,16 +13,119 @@
+  */
+ package io.trino.tpch;
+ 
+-import org.testng.annotations.Test;
+-
+ import static io.trino.tpch.GeneratorAssertions.assertEntityLinesMD5;
+ 
+-public class TestNationGenerator
+-{
++import org.testng.annotations.Test;
++
++public class TestNationGenerator {
+     @SuppressWarnings("SpellCheckingInspection")
+     @Test
+-    public void testGenerator()
+-    {
++    public void testGenerator() {
+         assertEntityLinesMD5(new NationGenerator(), "2f588e0b7fa72939b498c2abecd9fbbe");
+     }
++
++    @Test
++    public void testNationsGenerator() {
++        var nationsGenerator = new NationGenerator();
++
++        for (var nation : nationsGenerator) {
++            System.out.println(nation);
++        }
++    }
++
++    @Test
++    public void testRegionsGenerator() {
++        var regionsGenerator = new RegionGenerator();
++
++        for (var region : regionsGenerator) {
++            System.out.println(region);
++        }
++    }
++
++    @Test
++    public void testPartGenerator() {
++        var partGenerator = new PartGenerator(0.01, 1, 1);
++
++        for (var part : partGenerator) {
++            System.out.println(part);
++        }
++    }
++
++    @Test
++    public void testDistributionLoader() {
++        var distributions = Distributions.getDefaultDistributions();
++
++        // Show p_types and p_cntr distributions.
++        var pTypes = distributions.getPartTypes();
++        var pCntr = distributions.getPartContainers();
++
++        for (int i = 0; i < pTypes.size(); i++) {
++            var value = pTypes.getValue(i);
++            var weight = pTypes.getWeight(i);
++            System.out.println(value + " " + weight);
++        }
++
++        for (int i = 0; i < pCntr.size(); i++) {
++            var value = pCntr.getValue(i);
++            var weight = pCntr.getWeight(i);
++            System.out.println(value + " " + weight);
++        }
++    }
++
++    @Test
++    public void TestSupplierGenerator() {
++        var supplierGenerator = new SupplierGenerator(0.01, 1, 1);
++
++        for (var supplier : supplierGenerator) {
++            System.out.println(supplier);
++        }
++    }
++
++    @Test
++    void testCustomerGenerator() {
++        var customerGenerator = new CustomerGenerator(0.01, 1, 1);
++
++        for (var customer : customerGenerator) {
++            System.out.println(customer);
++        }
++    }
++
++    @Test
++    void testPartSupplierGenerator() {
++        var partSupplierGenerator = new PartSupplierGenerator(0.01, 1, 1);
++
++        for (var partSupplier : partSupplierGenerator) {
++            System.out.println(partSupplier);
++        }
++    }
++
++    @Test
++    void testOrderGenerator() {
++        var orderGenerator = new OrderGenerator(0.01, 1, 1);
++        var count = 0;
++
++        for (var order : orderGenerator) {
++            System.out.println(order);
++            count++;
++            if (count > 10) {
++                break;
++            }
++        }
++    }
++
++    @Test
++    void testLineItemGenerator() {
++        var lineItemGenerator = new LineItemGenerator(0.01, 1, 1);
++
++        var count = 0;
++
++        for (var lineItem : lineItemGenerator) {
++            System.out.println(lineItem);
++            count++;
++            if (count > 10) {
++                break;
++            }
++        }
++    }
++
+ }
diff --git a/pom.xml b/pom.xml
index 5b42e9a..7c269be 100644
--- a/pom.xml
+++ b/pom.xml
@@ -39,6 +39,8 @@
         <air.test.jvmsize>2g</air.test.jvmsize>
         <air.check.skip-spotbugs>true</air.check.skip-spotbugs>
         <air.check.skip-pmd>true</air.check.skip-pmd>
+        <air.check.skip-checkstyle>true</air.check.skip-checkstyle>
+        <checkstyle.skip>true</checkstyle.skip>
     </properties>
 
     <dependencies>
@@ -64,6 +66,13 @@
     <build>
         <pluginManagement>
             <plugins>
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-checkstyle-plugin</artifactId>
+                    <configuration>
+                        <skip>true</skip>
+                    </configuration>
+                </plugin>
                 <plugin>
                     <groupId>com.github.spotbugs</groupId>
                     <artifactId>spotbugs-maven-plugin</artifactId>
diff --git a/src/main/java/io/trino/tpch/Customer.java b/src/main/java/io/trino/tpch/Customer.java
index b71ab9e..f62e25c 100644
--- a/src/main/java/io/trino/tpch/Customer.java
+++ b/src/main/java/io/trino/tpch/Customer.java
@@ -27,10 +27,8 @@ public record Customer(
         long accountBalanceInCents,
         String marketSegment,
         String comment)
-        implements TpchEntity
-{
-    public Customer
-    {
+        implements TpchEntity {
+    public Customer {
         requireNonNull(name, "name is null");
         requireNonNull(address, "address is null");
         requireNonNull(phone, "phone is null");
@@ -38,14 +36,26 @@ public record Customer(
         requireNonNull(comment, "comment is null");
     }
 
-    public double accountBalance()
-    {
+    public double accountBalance() {
         return accountBalanceInCents / 100.0;
     }
 
     @Override
-    public String toLine()
-    {
-        return buildLine(customerKey, name, address, nationKey, phone, formatMoney(accountBalanceInCents), marketSegment, comment);
+    public String toCsv() {
+        return String.join(",",
+                String.valueOf(customerKey),
+                name,
+                address,
+                String.valueOf(nationKey),
+                phone,
+                formatMoney(accountBalanceInCents),
+                marketSegment,
+                comment);
+    }
+
+    @Override
+    public String toLine() {
+        return buildLine(customerKey, name, address, nationKey, phone, formatMoney(accountBalanceInCents),
+                marketSegment, comment);
     }
 }
diff --git a/src/main/java/io/trino/tpch/LineItem.java b/src/main/java/io/trino/tpch/LineItem.java
index f3a23bb..e4b65a3 100644
--- a/src/main/java/io/trino/tpch/LineItem.java
+++ b/src/main/java/io/trino/tpch/LineItem.java
@@ -36,10 +36,8 @@ public record LineItem(
         String shipInstructions,
         String shipMode,
         String comment)
-        implements TpchEntity
-{
-    public LineItem
-    {
+        implements TpchEntity {
+    public LineItem {
         requireNonNull(returnFlag, "returnFlag is null");
         requireNonNull(status, "status is null");
         requireNonNull(shipInstructions, "shipInstructions is null");
@@ -47,24 +45,41 @@ public record LineItem(
         requireNonNull(comment, "comment is null");
     }
 
-    public double extendedPrice()
-    {
+    public double extendedPrice() {
         return extendedPriceInCents / 100.0;
     }
 
-    public double discount()
-    {
+    public double discount() {
         return discountPercent / 100.0;
     }
 
-    public double tax()
-    {
+    public double tax() {
         return taxPercent / 100.0;
     }
 
     @Override
-    public String toLine()
-    {
+    public String toCsv() {
+        return String.join(",",
+                String.valueOf(orderKey),
+                String.valueOf(partKey),
+                String.valueOf(supplierKey),
+                String.valueOf(lineNumber),
+                String.valueOf(quantity),
+                formatMoney(extendedPriceInCents),
+                formatMoney(discountPercent),
+                formatMoney(taxPercent),
+                returnFlag,
+                status,
+                formatDate(shipDate),
+                formatDate(commitDate),
+                formatDate(receiptDate),
+                shipInstructions,
+                shipMode,
+                comment);
+    }
+
+    @Override
+    public String toLine() {
         return buildLine(
                 orderKey,
                 partKey,
diff --git a/src/main/java/io/trino/tpch/Nation.java b/src/main/java/io/trino/tpch/Nation.java
index ba044a6..126d352 100644
--- a/src/main/java/io/trino/tpch/Nation.java
+++ b/src/main/java/io/trino/tpch/Nation.java
@@ -22,17 +22,19 @@ public record Nation(
         String name,
         long regionKey,
         String comment)
-        implements TpchEntity
-{
-    public Nation
-    {
+        implements TpchEntity {
+    public Nation {
         requireNonNull(name, "name is null");
         requireNonNull(comment, "comment is null");
     }
 
     @Override
-    public String toLine()
-    {
+    public String toCsv() {
+        return String.join(",", String.valueOf(nationKey), name, String.valueOf(regionKey), comment);
+    }
+
+    @Override
+    public String toLine() {
         return buildLine(nationKey, name, regionKey, comment);
     }
 }
diff --git a/src/main/java/io/trino/tpch/Order.java b/src/main/java/io/trino/tpch/Order.java
index ec6a626..237e7d1 100644
--- a/src/main/java/io/trino/tpch/Order.java
+++ b/src/main/java/io/trino/tpch/Order.java
@@ -29,23 +29,33 @@ public record Order(
         String clerk,
         int shipPriority,
         String comment)
-        implements TpchEntity
-{
-    public Order
-    {
+        implements TpchEntity {
+    public Order {
         requireNonNull(orderPriority, "orderPriority is null");
         requireNonNull(clerk, "clerk is null");
         requireNonNull(comment, "comment is null");
     }
 
-    public double totalPrice()
-    {
+    public double totalPrice() {
         return totalPriceInCents / 100.0;
     }
 
     @Override
-    public String toLine()
-    {
+    public String toCsv() {
+        return String.join(",",
+                String.valueOf(orderKey),
+                String.valueOf(customerKey),
+                String.valueOf(orderStatus),
+                formatMoney(totalPriceInCents),
+                formatDate(orderDate),
+                orderPriority,
+                clerk,
+                String.valueOf(shipPriority),
+                comment);
+    }
+
+    @Override
+    public String toLine() {
         return buildLine(
                 orderKey,
                 customerKey,
diff --git a/src/main/java/io/trino/tpch/Part.java b/src/main/java/io/trino/tpch/Part.java
index 46382af..302a229 100644
--- a/src/main/java/io/trino/tpch/Part.java
+++ b/src/main/java/io/trino/tpch/Part.java
@@ -28,10 +28,8 @@ public record Part(
         String container,
         long retailPriceInCents,
         String comment)
-        implements TpchEntity
-{
-    public Part
-    {
+        implements TpchEntity {
+    public Part {
         requireNonNull(name, "name is null");
         requireNonNull(manufacturer, "manufacturer is null");
         requireNonNull(brand, "brand is null");
@@ -40,14 +38,26 @@ public record Part(
         requireNonNull(comment, "comment is null");
     }
 
-    public double retailPrice()
-    {
+    public double retailPrice() {
         return retailPriceInCents / 100.0;
     }
 
     @Override
-    public String toLine()
-    {
+    public String toCsv() {
+        return String.join(",",
+                String.valueOf(partKey),
+                name,
+                manufacturer,
+                brand,
+                type,
+                String.valueOf(size),
+                container,
+                formatMoney(retailPriceInCents),
+                comment);
+    }
+
+    @Override
+    public String toLine() {
         return buildLine(partKey,
                 name,
                 manufacturer,
diff --git a/src/main/java/io/trino/tpch/PartSupplier.java b/src/main/java/io/trino/tpch/PartSupplier.java
index b7f2378..01065ca 100644
--- a/src/main/java/io/trino/tpch/PartSupplier.java
+++ b/src/main/java/io/trino/tpch/PartSupplier.java
@@ -24,21 +24,27 @@ public record PartSupplier(
         int availableQuantity,
         long supplyCostInCents,
         String comment)
-        implements TpchEntity
-{
-    public PartSupplier
-    {
+        implements TpchEntity {
+    public PartSupplier {
         requireNonNull(comment, "comment is null");
     }
 
-    public double getSupplyCost()
-    {
+    public double getSupplyCost() {
         return supplyCostInCents / 100.0;
     }
 
     @Override
-    public String toLine()
-    {
+    public String toCsv() {
+        return String.join(",",
+                String.valueOf(partKey),
+                String.valueOf(supplierKey),
+                String.valueOf(availableQuantity),
+                formatMoney(supplyCostInCents),
+                comment);
+    }
+
+    @Override
+    public String toLine() {
         return buildLine(partKey, supplierKey, availableQuantity, formatMoney(supplyCostInCents), comment);
     }
 }
diff --git a/src/main/java/io/trino/tpch/Region.java b/src/main/java/io/trino/tpch/Region.java
index 176772b..d67d80b 100644
--- a/src/main/java/io/trino/tpch/Region.java
+++ b/src/main/java/io/trino/tpch/Region.java
@@ -21,17 +21,19 @@ public record Region(
         long regionKey,
         String name,
         String comment)
-        implements TpchEntity
-{
-    public Region
-    {
+        implements TpchEntity {
+    public Region {
         requireNonNull(name, "name is null");
         requireNonNull(comment, "comment is null");
     }
 
     @Override
-    public String toLine()
-    {
+    public String toCsv() {
+        return String.join(",", String.valueOf(regionKey), name, comment);
+    }
+
+    @Override
+    public String toLine() {
         return buildLine(regionKey, name, comment);
     }
 }
diff --git a/src/main/java/io/trino/tpch/Runner.java b/src/main/java/io/trino/tpch/Runner.java
new file mode 100644
index 0000000..d03f531
--- /dev/null
+++ b/src/main/java/io/trino/tpch/Runner.java
@@ -0,0 +1,64 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.trino.tpch;
+
+import java.io.File;
+
+public class Runner {
+    public static void main(String[] args) {
+        // Implements a dbgen command line utility interface to allow
+        // users to generate TPC-H data.
+        //
+        // The interface supported is :
+        // -s <scale> 1 Scale of the database population. Scale
+        // 1.0 represents ~1 GB of data
+        // -o <output directory> Directory to place the output data
+        //
+        // This isn't handled since we probably want all the data to build
+        // the CSV files used for tests.
+        //
+        // -T <table> Generate the data for a particular table
+        // ONLY. Arguments: p -- part/partuspp,
+        // c -- customer, s -- supplier,
+        // o -- orders/lineitem, n -- nation, r -- region,
+        // l -- code (same as n and r),
+        // O -- orders, L -- lineitem, P -- part,
+        // S -- partsupp
+        Double scale = 0.001;
+        String outputDirectory = "fixtures/sf-0.001";
+
+        if (scale < 0.001 || scale > 1000) {
+            System.out.println("Scale must be between 0.01 and 1000");
+            System.exit(1);
+        }
+
+        // Check if the output directory exists.
+        File directory = new File(outputDirectory);
+
+        // Check if the output directory is a directory.
+        if (!directory.isDirectory()) {
+            System.out.println("Output directory does not exist or is not a directory");
+            System.exit(1);
+        }
+
+        // Check if the output directory exists.
+        if (directory.isDirectory() && !directory.exists()) {
+            System.out.println("Output directory does not exist");
+            System.exit(1);
+        }
+
+        TpchTable.toCsvFile(outputDirectory, scale);
+    }
+
+}
diff --git a/src/main/java/io/trino/tpch/Supplier.java b/src/main/java/io/trino/tpch/Supplier.java
index f8135f8..deb2a03 100644
--- a/src/main/java/io/trino/tpch/Supplier.java
+++ b/src/main/java/io/trino/tpch/Supplier.java
@@ -26,24 +26,32 @@ public record Supplier(
         String phone,
         long accountBalanceInCents,
         String comment)
-        implements TpchEntity
-{
-    public Supplier
-    {
+        implements TpchEntity {
+    public Supplier {
         requireNonNull(name, "name is null");
         requireNonNull(address, "address is null");
         requireNonNull(phone, "phone is null");
         requireNonNull(comment, "comment is null");
     }
 
-    public double getAccountBalance()
-    {
+    public double getAccountBalance() {
         return accountBalanceInCents / 100.0;
     }
 
     @Override
-    public String toLine()
-    {
+    public String toCsv() {
+        return String.join(",",
+                String.valueOf(supplierKey),
+                name,
+                address,
+                String.valueOf(nationKey),
+                phone,
+                formatMoney(accountBalanceInCents),
+                comment);
+    }
+
+    @Override
+    public String toLine() {
         return buildLine(
                 supplierKey,
                 name,
diff --git a/src/main/java/io/trino/tpch/TpchEntity.java b/src/main/java/io/trino/tpch/TpchEntity.java
index 9cd7aa4..cecc2f9 100644
--- a/src/main/java/io/trino/tpch/TpchEntity.java
+++ b/src/main/java/io/trino/tpch/TpchEntity.java
@@ -14,9 +14,10 @@
 package io.trino.tpch;
 
 public sealed interface TpchEntity
-        permits Customer, LineItem, Nation, Order, Part, PartSupplier, Region, Supplier
-{
+        permits Customer, LineItem, Nation, Order, Part, PartSupplier, Region, Supplier {
     long rowNumber();
 
     String toLine();
+
+    String toCsv();
 }
diff --git a/src/main/java/io/trino/tpch/TpchTable.java b/src/main/java/io/trino/tpch/TpchTable.java
index 35ccb7a..5081338 100644
--- a/src/main/java/io/trino/tpch/TpchTable.java
+++ b/src/main/java/io/trino/tpch/TpchTable.java
@@ -13,76 +13,65 @@
  */
 package io.trino.tpch;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Maps;
+import static com.google.common.base.Preconditions.checkArgument;
 
+import java.io.FileWriter;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Map;
 
-import static com.google.common.base.Preconditions.checkArgument;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Maps;
 
-public abstract class TpchTable<E extends TpchEntity>
-{
-    public static final TpchTable<Customer> CUSTOMER = new TpchTable<Customer>("customer", CustomerColumn.values())
-    {
+public abstract class TpchTable<E extends TpchEntity> {
+    public static final TpchTable<Customer> CUSTOMER = new TpchTable<Customer>("customer", CustomerColumn.values()) {
         @Override
-        public Iterable<Customer> createGenerator(double scaleFactor, int part, int partCount)
-        {
+        public Iterable<Customer> createGenerator(double scaleFactor, int part, int partCount) {
             return new CustomerGenerator(scaleFactor, part, partCount);
         }
     };
 
-    public static final TpchTable<Order> ORDERS = new TpchTable<Order>("orders", OrderColumn.values())
-    {
+    public static final TpchTable<Order> ORDERS = new TpchTable<Order>("orders", OrderColumn.values()) {
         @Override
-        public Iterable<Order> createGenerator(double scaleFactor, int part, int partCount)
-        {
+        public Iterable<Order> createGenerator(double scaleFactor, int part, int partCount) {
             return new OrderGenerator(scaleFactor, part, partCount);
         }
     };
 
-    public static final TpchTable<LineItem> LINE_ITEM = new TpchTable<LineItem>("lineitem", LineItemColumn.values())
-    {
+    public static final TpchTable<LineItem> LINE_ITEM = new TpchTable<LineItem>("lineitem", LineItemColumn.values()) {
         @Override
-        public Iterable<LineItem> createGenerator(double scaleFactor, int part, int partCount)
-        {
+        public Iterable<LineItem> createGenerator(double scaleFactor, int part, int partCount) {
             return new LineItemGenerator(scaleFactor, part, partCount);
         }
     };
 
-    public static final TpchTable<Part> PART = new TpchTable<Part>("part", PartColumn.values())
-    {
+    public static final TpchTable<Part> PART = new TpchTable<Part>("part", PartColumn.values()) {
         @Override
-        public Iterable<Part> createGenerator(double scaleFactor, int part, int partCount)
-        {
+        public Iterable<Part> createGenerator(double scaleFactor, int part, int partCount) {
             return new PartGenerator(scaleFactor, part, partCount);
         }
     };
 
-    public static final TpchTable<PartSupplier> PART_SUPPLIER = new TpchTable<PartSupplier>("partsupp", PartSupplierColumn.values())
-    {
+    public static final TpchTable<PartSupplier> PART_SUPPLIER = new TpchTable<PartSupplier>("partsupp",
+            PartSupplierColumn.values()) {
         @Override
-        public Iterable<PartSupplier> createGenerator(double scaleFactor, int part, int partCount)
-        {
+        public Iterable<PartSupplier> createGenerator(double scaleFactor, int part, int partCount) {
             return new PartSupplierGenerator(scaleFactor, part, partCount);
         }
     };
 
-    public static final TpchTable<Supplier> SUPPLIER = new TpchTable<Supplier>("supplier", SupplierColumn.values())
-    {
+    public static final TpchTable<Supplier> SUPPLIER = new TpchTable<Supplier>("supplier", SupplierColumn.values()) {
         @Override
-        public Iterable<Supplier> createGenerator(double scaleFactor, int part, int partCount)
-        {
+        public Iterable<Supplier> createGenerator(double scaleFactor, int part, int partCount) {
             return new SupplierGenerator(scaleFactor, part, partCount);
         }
     };
 
-    public static final TpchTable<Nation> NATION = new TpchTable<Nation>("nation", NationColumn.values())
-    {
+    public static final TpchTable<Nation> NATION = new TpchTable<Nation>("nation", NationColumn.values()) {
         @Override
-        public Iterable<Nation> createGenerator(double scaleFactor, int part, int partCount)
-        {
+        public Iterable<Nation> createGenerator(double scaleFactor, int part, int partCount) {
             if (part != 1) {
                 return ImmutableList.of();
             }
@@ -90,11 +79,9 @@ public abstract class TpchTable<E extends TpchEntity>
         }
     };
 
-    public static final TpchTable<Region> REGION = new TpchTable<Region>("region", RegionColumn.values())
-    {
+    public static final TpchTable<Region> REGION = new TpchTable<Region>("region", RegionColumn.values()) {
         @Override
-        public Iterable<Region> createGenerator(double scaleFactor, int part, int partCount)
-        {
+        public Iterable<Region> createGenerator(double scaleFactor, int part, int partCount) {
             if (part != 1) {
                 return ImmutableList.of();
             }
@@ -110,13 +97,11 @@ public abstract class TpchTable<E extends TpchEntity>
         TABLES_BY_NAME = Maps.uniqueIndex(TABLES, TpchTable::getTableName);
     }
 
-    public static List<TpchTable<?>> getTables()
-    {
+    public static List<TpchTable<?>> getTables() {
         return TABLES;
     }
 
-    public static TpchTable<?> getTable(String tableName)
-    {
+    public static TpchTable<?> getTable(String tableName) {
         TpchTable<?> table = TABLES_BY_NAME.get(tableName);
         checkArgument(table != null, "Table %s not found", tableName);
         return table;
@@ -126,8 +111,7 @@ public abstract class TpchTable<E extends TpchEntity>
     private final List<TpchColumn<E>> columns;
     private final Map<String, TpchColumn<E>> columnsByName;
 
-    private TpchTable(String tableName, TpchColumn<E>[] columns)
-    {
+    private TpchTable(String tableName, TpchColumn<E>[] columns) {
         this.tableName = tableName;
         this.columns = ImmutableList.copyOf(columns);
         this.columnsByName = new ImmutableMap.Builder<String, TpchColumn<E>>()
@@ -136,22 +120,72 @@ public abstract class TpchTable<E extends TpchEntity>
                 .build();
     }
 
-    public String getTableName()
-    {
+    public String getTableName() {
         return tableName;
     }
 
-    public List<TpchColumn<E>> getColumns()
-    {
+    public List<TpchColumn<E>> getColumns() {
         return columns;
     }
 
-    public TpchColumn<E> getColumn(String columnName)
-    {
+    public TpchColumn<E> getColumn(String columnName) {
         TpchColumn<E> column = columnsByName.get(columnName);
         checkArgument(column != null, "Table %s does not have a column %s", tableName, columnName);
         return column;
     }
 
     public abstract Iterable<E> createGenerator(double scaleFactor, int part, int partCount);
+
+    @Override
+    public String toString() {
+        return tableName;
+    }
+
+    public static void toCsvFile(String outputDirectory, Double scale) {
+        // Create a table of generators (iterables) for each table.
+        List<TpchTable<?>> tables = TpchTable.getTables();
+
+        // Iterate and write a CSV file for each table in the target directory.
+        for (TpchTable<?> table : tables) {
+            String tableName = table.getTableName();
+            List<? extends TpchColumn<?>> columns = table.getColumns();
+            String fileName = outputDirectory + "/" + tableName + ".csv";
+
+            var generator = table.createGenerator(scale, 1, 1);
+            FileWriter writer;
+            try {
+                writer = new FileWriter(fileName, StandardCharsets.UTF_8);
+                // Write the header.
+                String[] header = columns.stream().map((TpchColumn<?> column) -> column.getColumnName())
+                        .toArray(String[]::new);
+
+                writer.write(String.join(",", header) + "\n");
+
+                for (var entity : generator) {
+                    // Write the entity to the CSV file, entity is a row of objects and each
+                    // object is indexed into its columns by the table's columns to properly
+                    // cast the object to the correct type.
+
+                    // Cast and build the row of objects.
+                    var line = entity.toCsv();
+
+                    // Write the line to the CSV file.
+                    // Write the CSV file.
+                    try {
+                        // Write the line.
+                        writer.write(line + "\n");
+                    } catch (IOException e) {
+                        System.out.println("Error writing CSV file: " + e.getMessage());
+                        System.exit(1);
+                    }
+
+                }
+                writer.close();
+            } catch (IOException e) {
+                // TODO Auto-generated catch block
+                e.printStackTrace();
+            }
+        }
+    }
+
 }
diff --git a/src/main/java/io/trino/tpch/TpchTables.java b/src/main/java/io/trino/tpch/TpchTables.java
new file mode 100644
index 0000000..8017fcd
--- /dev/null
+++ b/src/main/java/io/trino/tpch/TpchTables.java
@@ -0,0 +1,36 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.trino.tpch;
+
+// Enumerates the tables that can be generated by the dbgen utility.
+//
+// The tables are:
+// - Part
+// - PartSupp
+// - Supplier
+// - Customer
+// - Orders
+// - LineItem
+// - Nation
+// - Region
+public enum TpchTables {
+    PART,
+    PARTSUPP,
+    SUPPLIER,
+    CUSTOMER,
+    ORDERS,
+    LINEITEM,
+    NATION,
+    REGION
+}
diff --git a/src/test/java/io/trino/tpch/TestNationGenerator.java b/src/test/java/io/trino/tpch/TestNationGenerator.java
index c3212f7..4e0f432 100644
--- a/src/test/java/io/trino/tpch/TestNationGenerator.java
+++ b/src/test/java/io/trino/tpch/TestNationGenerator.java
@@ -13,16 +13,119 @@
  */
 package io.trino.tpch;
 
-import org.testng.annotations.Test;
-
 import static io.trino.tpch.GeneratorAssertions.assertEntityLinesMD5;
 
-public class TestNationGenerator
-{
+import org.testng.annotations.Test;
+
+public class TestNationGenerator {
     @SuppressWarnings("SpellCheckingInspection")
     @Test
-    public void testGenerator()
-    {
+    public void testGenerator() {
         assertEntityLinesMD5(new NationGenerator(), "2f588e0b7fa72939b498c2abecd9fbbe");
     }
+
+    @Test
+    public void testNationsGenerator() {
+        var nationsGenerator = new NationGenerator();
+
+        for (var nation : nationsGenerator) {
+            System.out.println(nation);
+        }
+    }
+
+    @Test
+    public void testRegionsGenerator() {
+        var regionsGenerator = new RegionGenerator();
+
+        for (var region : regionsGenerator) {
+            System.out.println(region);
+        }
+    }
+
+    @Test
+    public void testPartGenerator() {
+        var partGenerator = new PartGenerator(0.01, 1, 1);
+
+        for (var part : partGenerator) {
+            System.out.println(part);
+        }
+    }
+
+    @Test
+    public void testDistributionLoader() {
+        var distributions = Distributions.getDefaultDistributions();
+
+        // Show p_types and p_cntr distributions.
+        var pTypes = distributions.getPartTypes();
+        var pCntr = distributions.getPartContainers();
+
+        for (int i = 0; i < pTypes.size(); i++) {
+            var value = pTypes.getValue(i);
+            var weight = pTypes.getWeight(i);
+            System.out.println(value + " " + weight);
+        }
+
+        for (int i = 0; i < pCntr.size(); i++) {
+            var value = pCntr.getValue(i);
+            var weight = pCntr.getWeight(i);
+            System.out.println(value + " " + weight);
+        }
+    }
+
+    @Test
+    public void TestSupplierGenerator() {
+        var supplierGenerator = new SupplierGenerator(0.01, 1, 1);
+
+        for (var supplier : supplierGenerator) {
+            System.out.println(supplier);
+        }
+    }
+
+    @Test
+    void testCustomerGenerator() {
+        var customerGenerator = new CustomerGenerator(0.01, 1, 1);
+
+        for (var customer : customerGenerator) {
+            System.out.println(customer);
+        }
+    }
+
+    @Test
+    void testPartSupplierGenerator() {
+        var partSupplierGenerator = new PartSupplierGenerator(0.01, 1, 1);
+
+        for (var partSupplier : partSupplierGenerator) {
+            System.out.println(partSupplier);
+        }
+    }
+
+    @Test
+    void testOrderGenerator() {
+        var orderGenerator = new OrderGenerator(0.01, 1, 1);
+        var count = 0;
+
+        for (var order : orderGenerator) {
+            System.out.println(order);
+            count++;
+            if (count > 10) {
+                break;
+            }
+        }
+    }
+
+    @Test
+    void testLineItemGenerator() {
+        var lineItemGenerator = new LineItemGenerator(0.01, 1, 1);
+
+        var count = 0;
+
+        for (var lineItem : lineItemGenerator) {
+            System.out.println(lineItem);
+            count++;
+            if (count > 10) {
+                break;
+            }
+        }
+    }
+
 }
diff --git a/src/test/java/io/trino/tpch/TestTpchColumn.java b/src/test/java/io/trino/tpch/TestTpchColumn.java
index 88f2e44..26d0f6d 100644
--- a/src/test/java/io/trino/tpch/TestTpchColumn.java
+++ b/src/test/java/io/trino/tpch/TestTpchColumn.java
@@ -13,23 +13,21 @@
  */
 package io.trino.tpch;
 
-import org.testng.annotations.Test;
-
-import java.util.List;
-import java.util.function.Consumer;
-import java.util.stream.Stream;
-
 import static java.lang.String.format;
 import static java.util.Arrays.asList;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertFalse;
 import static org.testng.Assert.assertTrue;
 
-public class TestTpchColumn
-{
+import java.util.List;
+import java.util.function.Consumer;
+import java.util.stream.Stream;
+
+import org.testng.annotations.Test;
+
+public class TestTpchColumn {
     @Test
-    public void testAllColumnNamesHaveValidPrefixes()
-    {
+    public void testAllColumnNamesHaveValidPrefixes() {
         forEachTpchColumn(column -> {
             String columnName = column.getColumnName();
             assertTrue(hasValidColumnPrefix(columnName),
@@ -38,33 +36,29 @@ public class TestTpchColumn
     }
 
     @Test
-    public void testForbidsInvalidTpchPrefixes()
-    {
+    public void testForbidsInvalidTpchPrefixes() {
         assertFalse(hasValidColumnPrefix("order"));
         assertFalse(hasValidColumnPrefix("z_order"));
     }
 
-    private boolean hasValidColumnPrefix(String columnName)
-    {
+    private boolean hasValidColumnPrefix(String columnName) {
         String columnNameLowercase = columnName.toLowerCase();
         return Stream.of("p_", "ps_", "l_", "o_", "s_", "c_", "n_", "r_")
                 .anyMatch(columnNameLowercase::startsWith);
     }
 
     @Test
-    public void testSimplifiedColumnNamesAreSuffixesOfColumnNames()
-    {
-        forEachTpchColumn(column -> assertEquals(column.getSimplifiedColumnName(), stripPrefix(column.getColumnName())));
+    public void testSimplifiedColumnNamesAreSuffixesOfColumnNames() {
+        forEachTpchColumn(
+                column -> assertEquals(column.getSimplifiedColumnName(), stripPrefix(column.getColumnName())));
     }
 
-    private String stripPrefix(String columnName)
-    {
+    private String stripPrefix(String columnName) {
         return columnName.replaceFirst("\\w{1,2}_", "");
     }
 
-    private void forEachTpchColumn(Consumer<TpchColumn> columnConsumer)
-    {
-        List<Class<? extends TpchColumn>> columnEnums = asList(
+    private void forEachTpchColumn(Consumer<TpchColumn<?>> columnConsumer) {
+        List<Class<? extends TpchColumn<?>>> columnEnums = asList(
                 CustomerColumn.class,
                 LineItemColumn.class,
                 NationColumn.class,
@@ -74,7 +68,7 @@ public class TestTpchColumn
                 RegionColumn.class,
                 SupplierColumn.class);
 
-        columnEnums.forEach((Class<? extends TpchColumn> columnEnumClass) -> {
+        columnEnums.forEach((Class<? extends TpchColumn<?>> columnEnumClass) -> {
             asList(columnEnumClass.getEnumConstants()).forEach(columnConsumer::accept);
         });
     }
